name: Test Setup SSH/GPG commit signing

on:
  pull_request:
    paths:
      - '**setup-commit-signing**'
      - 'package.json'
      - 'package-lock.json'
      - 'node_modules/**'

permissions:
  contents: read

jobs:
  ssh-commit-signing:
    strategy:
      matrix:
        container:
          - ''
          - image: ghcr.io/homebrew/ubuntu22.04:master
            options: --user=root
    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Configure git user
        id: git-config
        uses: ./git-user-config/
        with:
          username: BrewTestBot

      - name: Generate SSH key
        id: generate-ssh-key
        run: |
          ssh-keygen -t ed25519 -C "Test CI key" -f /tmp/test-ssh-key -N ""
          KEY="$(cat /tmp/test-ssh-key)"
          # shellcheck disable=SC2001
          echo "${KEY}" | sed 's/^ */::add-mask::/'
          echo "key<<!!!
          ${KEY}
          !!!" >> "${GITHUB_OUTPUT}"

      - name: Set up commit signing
        id: set-up-commit-signing
        uses: ./setup-commit-signing/
        with:
          signing_key: ${{ steps.generate-ssh-key.outputs.key }}
          ssh: true

      - name: Make changes and commit them
        run: |
          git config --global --add safe.directory "${GITHUB_WORKSPACE}"
          git checkout -b test-setup-commit-signing

          touch test.txt
          echo "Hello, Homebrew!" >> test.txt

          git add test.txt
          git commit -m "test.txt: create and add content."

      - name: Test
        run: |
          git log --show-signature -1 | grep 'Good "git" signature'

  gpg-commit-signing:
    strategy:
      matrix:
        container:
          - ''
          - image: ghcr.io/homebrew/ubuntu22.04:master
            options: --user=root
    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Configure git user
        id: git-config
        uses: ./git-user-config/
        with:
          username: BrewTestBot

      - name: Generate GPG key
        id: generate-gpg-key
        env:
          GIT_EMAIL: ${{ steps.git-config.outputs.email }}
        run: |
          export GNUPGHOME="/tmp/test-gpg-home"
          mkdir -p "${GNUPGHOME}"
          chmod 700 "${GNUPGHOME}"
          PASSPHRASE=$(gpg --batch --gen-random --armor 1 32)
          cat <<EOS | gpg --batch --generate-key
            Key-Type: RSA
            Key-Length: 4096
            Key-Usage: sign
            Subkey-Type: RSA
            Subkey-Length: 4096
            Subkey-Usage: sign
            Name-Real: Homebrew/actions Test
            Name-Comment: Test CI key
            Name-Email: ${GIT_EMAIL}
            Passphrase: ${PASSPHRASE}
            Expire-Date: seconds=900
          EOS
          KEY=$(echo "${PASSPHRASE}" | gpg --batch --pinentry-mode=loopback --passphrase-fd=0 --armor --export-secret-subkeys "<${GIT_EMAIL}>" | base64 --wrap=0)
          echo "::add-mask::${KEY}"
          echo "::add-mask::${PASSPHRASE}"
          echo "key<<!!!
          ${KEY}
          !!!" >> "${GITHUB_OUTPUT}"
          echo "passphrase=${PASSPHRASE}" >> "${GITHUB_OUTPUT}"
          rm -r "${GNUPGHOME}"

      - name: Set up commit signing
        id: set-up-commit-signing
        uses: ./setup-commit-signing/
        with:
          signing_key: ${{ steps.generate-gpg-key.outputs.key }}

      - name: Make changes and commit them
        run: |
          git config --global --add safe.directory "${GITHUB_WORKSPACE}"
          git checkout -b test-setup-commit-signing

          touch test.txt
          echo "Hello, Homebrew!" >> test.txt

          git add test.txt
          git commit -m "test.txt: create and add content."
        env:
          HOMEBREW_GPG_PASSPHRASE: ${{ steps.generate-gpg-key.outputs.passphrase }}

      - name: Test
        run: |
          git log --show-signature -1 | grep "gpg: Good"
